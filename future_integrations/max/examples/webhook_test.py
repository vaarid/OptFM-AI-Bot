#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º

–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏ MAX –±–æ—Ç–∞
–±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ MAX API.
"""
import asyncio
import json
import aiohttp
import time
from typing import Dict, Any

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
TEST_CONFIG = {
    "base_url": "http://localhost:8000",  # URL –≤–∞—à–µ–≥–æ FastAPI —Å–µ—Ä–≤–µ—Ä–∞
    "webhook_path": "/webhook/max/",
    "status_path": "/webhook/max/status",
    "test_path": "/webhook/max/test",
}

# –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
TEST_MESSAGES = [
    {
        "description": "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ",
        "message": {
            "message_id": 1,
            "from": {
                "id": "test_user_1",
                "first_name": "–ò–≤–∞–Ω",
                "username": "ivan_test"
            },
            "chat": {
                "id": "test_chat_1",
                "type": "private"
            },
            "date": int(time.time()),
            "text": "–ü—Ä–∏–≤–µ—Ç!"
        }
    },
    {
        "description": "–í–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö",
        "message": {
            "message_id": 2,
            "from": {
                "id": "test_user_2",
                "first_name": "–ê–Ω–Ω–∞",
                "username": "anna_test"
            },
            "chat": {
                "id": "test_chat_2",
                "type": "private"
            },
            "date": int(time.time()),
            "text": "–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã?"
        }
    },
    {
        "description": "–í–æ–ø—Ä–æ—Å –æ —Ü–µ–Ω–∞—Ö",
        "message": {
            "message_id": 3,
            "from": {
                "id": "test_user_3",
                "first_name": "–ü–µ—Ç—Ä",
                "username": "petr_test"
            },
            "chat": {
                "id": "test_chat_3",
                "type": "private"
            },
            "date": int(time.time()),
            "text": "–°–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?"
        }
    },
    {
        "description": "–ü—Ä–æ—â–∞–Ω–∏–µ",
        "message": {
            "message_id": 4,
            "from": {
                "id": "test_user_4",
                "first_name": "–ú–∞—Ä–∏—è",
                "username": "maria_test"
            },
            "chat": {
                "id": "test_chat_4",
                "type": "private"
            },
            "date": int(time.time()),
            "text": "–°–ø–∞—Å–∏–±–æ, –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è!"
        }
    },
    {
        "description": "–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        "message": {
            "message_id": 5,
            "from": {
                "id": "test_user_5",
                "first_name": "–ê–ª–µ–∫—Å–µ–π",
                "username": "alex_test"
            },
            "chat": {
                "id": "test_chat_5",
                "type": "private"
            },
            "date": int(time.time()),
            "text": "–æ–∫"
        }
    }
]

class MaxWebhookTester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è MAX webhook'–æ–≤"""
    
    def __init__(self, base_url: str):
        self.base_url = base_url
        self.session = None
        
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def check_server_status(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        
        Returns:
            bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω
        """
        try:
            url = f"{self.base_url}/"
            async with self.session.get(url) as response:
                if response.status == 200:
                    data = await response.json()
                    print(f"‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: {data}")
                    return True
                else:
                    print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status}")
                    return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
            return False
    
    async def check_max_status(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MAX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        
        Returns:
            dict: –°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        try:
            url = f"{self.base_url}{TEST_CONFIG['status_path']}"
            async with self.session.get(url) as response:
                if response.status == 200:
                    status = await response.json()
                    print("üìä –°—Ç–∞—Ç—É—Å MAX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏:")
                    for key, value in status.items():
                        print(f"   {key}: {value}")
                    return status
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: HTTP {response.status}")
                    return {}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
            return {}
    
    async def test_webhook_message(self, test_data: Dict[str, Any]) -> bool:
        """
        –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ webhook
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}{TEST_CONFIG['webhook_path']}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –∫–∞–∫ –æ—Ç –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ MAX webhook'–∞
            payload = {"message": test_data["message"]}
            
            async with self.session.post(url, json=payload) as response:
                result = await response.json()
                
                if response.status == 200:
                    print(f"‚úÖ {test_data['description']}: {result}")
                    return True
                else:
                    print(f"‚ùå {test_data['description']}: HTTP {response.status} - {result}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {test_data['description']}: {e}")
            return False
    
    async def test_direct_processing(self, test_data: Dict[str, Any]) -> bool:
        """
        –¢–µ—Å—Ç –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (–±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ MAX)
        
        Args:
            test_data: –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            bool: True –µ—Å–ª–∏ —Ç–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ
        """
        try:
            url = f"{self.base_url}{TEST_CONFIG['test_path']}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
            message = test_data["message"]
            payload = {
                "text": message["text"],
                "user_name": message["from"]["first_name"],
                "user_id": message["from"]["id"],
                "chat_id": message["chat"]["id"]
            }
            
            async with self.session.post(url, json=payload) as response:
                result = await response.json()
                
                if response.status == 200:
                    print(f"‚úÖ –¢–µ—Å—Ç {test_data['description']}:")
                    print(f"   –ó–∞–ø—Ä–æ—Å: {payload['text']}")
                    print(f"   –û—Ç–≤–µ—Ç: {result['bot_response'][:100]}...")
                    return True
                else:
                    print(f"‚ùå –¢–µ—Å—Ç {test_data['description']}: HTTP {response.status}")
                    return False
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä—è–º–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è {test_data['description']}: {e}")
            return False

async def run_basic_tests():
    """–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤—ã—Ö —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ MAX webhook'–∞")
    print("=" * 50)
    
    async with MaxWebhookTester(TEST_CONFIG["base_url"]) as tester:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
        print("\n1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
        if not await tester.check_server_status():
            print("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ FastAPI –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:8000")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MAX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        print("\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ MAX –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏...")
        status = await tester.check_max_status()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        print("\n3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π...")
        success_count = 0
        
        for test_data in TEST_MESSAGES:
            success = await tester.test_direct_processing(test_data)
            if success:
                success_count += 1
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
        
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ: {success_count}/{len(TEST_MESSAGES)} —Ç–µ—Å—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook'–æ–≤ (–µ—Å–ª–∏ MAX –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if status.get("api_key_configured"):
            print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞...")
            webhook_success = 0
            
            for test_data in TEST_MESSAGES:
                success = await tester.test_webhook_message(test_data)
                if success:
                    webhook_success += 1
                await asyncio.sleep(0.5)
            
            print(f"\n‚úÖ Webhook —Ç–µ—Å—Ç—ã: {webhook_success}/{len(TEST_MESSAGES)}")
        else:
            print("\n‚ö†Ô∏è MAX API –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, webhook —Ç–µ—Å—Ç—ã –ø—Ä–æ–ø—É—â–µ–Ω—ã")
        
        return True

async def run_load_test():
    """–ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    print("=" * 50)
    
    async with MaxWebhookTester(TEST_CONFIG["base_url"]) as tester:
        tasks = []
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        for i in range(10):
            for test_data in TEST_MESSAGES[:2]:  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
                tasks.append(tester.test_direct_processing(test_data))
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        end_time = time.time()
        successful = sum(1 for r in results if r is True)
        
        print(f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {successful}/{len(tasks)}")
        print(f"üöÄ RPS: {len(tasks)/(end_time - start_time):.2f}")

async def test_error_cases():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫...")
    print("=" * 50)
    
    async with MaxWebhookTester(TEST_CONFIG["base_url"]) as tester:
        error_tests = [
            {
                "description": "–ü—É—Å—Ç–æ–π payload",
                "payload": {}
            },
            {
                "description": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π JSON",
                "payload": {"invalid": "data"}
            },
            {
                "description": "–°–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞",
                "payload": {
                    "message": {
                        "message_id": 999,
                        "from": {"id": "test", "first_name": "Test"},
                        "chat": {"id": "test", "type": "private"},
                        "date": int(time.time())
                        # –ù–µ—Ç –ø–æ–ª—è "text"
                    }
                }
            }
        ]
        
        for test in error_tests:
            try:
                url = f"{tester.base_url}{TEST_CONFIG['webhook_path']}"
                async with tester.session.post(url, json=test["payload"]) as response:
                    result = await response.json()
                    print(f"üìù {test['description']}: HTTP {response.status} - {result}")
            except Exception as e:
                print(f"‚ùå {test['description']}: –û—à–∏–±–∫–∞ - {e}")

def print_setup_instructions():
    """–í—ã–≤–æ–¥ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ"""
    print("\nüìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ù–ê–°–¢–†–û–ô–ö–ï")
    print("=" * 50)
    print("1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ FastAPI —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω:")
    print("   python src/main.py")
    print()
    print("2. –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–±–∞–≤—å—Ç–µ –≤ .env:")
    print("   MAX_API_KEY=your_api_key_here")
    print()
    print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç:")
    print("   python future_integrations/max/examples/webhook_test.py")
    print()
    print("4. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ –±—Ä–∞—É–∑–µ—Ä–µ –æ—Ç–∫—Ä–æ–π—Ç–µ:")
    print("   http://localhost:8000/webhook/max/status")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ OptFM Bot —Å MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º")
    print("=" * 60)
    
    try:
        # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
        await run_basic_tests()
        
        # –¢–µ—Å—Ç—ã –æ—à–∏–±–æ–∫
        await test_error_cases()
        
        # –ù–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        choice = input("\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–∞–≥—Ä—É–∑–æ—á–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): ")
        if choice.lower() in ['y', 'yes', '–¥–∞']:
            await run_load_test()
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    print_setup_instructions()

if __name__ == "__main__":
    asyncio.run(main())
