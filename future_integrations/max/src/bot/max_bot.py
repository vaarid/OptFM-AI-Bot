"""
MAX Messenger Bot Module for OptFM AI Bot

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–º.
–ü–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram –±–æ—Ç–∞.
"""
import logging
import asyncio
import aiohttp
from typing import Dict, Any, Optional
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.append(os.path.join(os.path.dirname(__file__), '..', '..', '..', 'src'))
from faq.enhanced_faq_manager import EnhancedFAQManager

logger = logging.getLogger(__name__)

class OptFMMaxBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å MAX –±–æ—Ç–∞ –¥–ª—è OptFM"""
    
    def __init__(self, api_key: str, base_url: str = "https://max-api.chat/api"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAX –±–æ—Ç–∞
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è MAX
            base_url: –ë–∞–∑–æ–≤—ã–π URL –¥–ª—è MAX API
        """
        self.api_key = api_key
        self.base_url = base_url
        self.faq_manager = EnhancedFAQManager()
        self.session = None
        
        logger.info("OptFM MAX Bot initialized")
        
    async def _get_session(self) -> aiohttp.ClientSession:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ HTTP —Å–µ—Å—Å–∏–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
        
        Returns:
            aiohttp.ClientSession: –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è —Å–µ—Å—Å–∏—è
        """
        if self.session is None:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json",
                "User-Agent": "OptFM-Bot/1.0"
            }
            timeout = aiohttp.ClientTimeout(total=10)
            self.session = aiohttp.ClientSession(
                headers=headers,
                timeout=timeout
            )
        return self.session
        
    async def send_message(self, chat_id: str, text: str, parse_mode: str = None) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ MAX
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
            
        Returns:
            bool: –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            session = await self._get_session()
            
            payload = {
                "chat_id": chat_id,
                "text": text
            }
            
            if parse_mode:
                payload["parse_mode"] = parse_mode
            
            async with session.post(f"{self.base_url}/sendMessage", json=payload) as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info(f"Message sent to MAX chat {chat_id}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"Failed to send MAX message: {response.status} - {error_text}")
                    return False
                    
        except asyncio.TimeoutError:
            logger.error("Timeout sending message to MAX")
            return False
        except Exception as e:
            logger.error(f"Error sending MAX message: {e}")
            return False
            
    async def handle_message(self, message_data: Dict[str, Any]) -> Optional[str]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç MAX
        
        Args:
            message_data: –î–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ MAX webhook
            
        Returns:
            str: –û—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            user_message = message_data.get("text", "")
            user_data = message_data.get("from", {})
            user_name = user_data.get("first_name", "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
            user_id = user_data.get("id", "unknown")
            chat_data = message_data.get("chat", {})
            chat_id = chat_data.get("id", "")
            
            logger.info(f"Processing MAX message from user {user_id} ({user_name}): {user_message[:50]}...")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            response = await self._process_user_message(user_message, user_name)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            if response and chat_id:
                success = await self.send_message(chat_id, response)
                if success:
                    logger.info(f"Response sent to MAX user {user_id}")
                    return response
                else:
                    logger.error(f"Failed to send response to MAX user {user_id}")
            
            return response
            
        except Exception as e:
            logger.error(f"Error handling MAX message: {e}")
            return None
            
    async def _process_user_message(self, user_message: str, user_name: str) -> str:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ Telegram –±–æ—Ç—É)
        
        Args:
            user_message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            user_name: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        greeting_keywords = [
            '–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', 
            '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', 'hi', 'hello', '–Ω–∞—á–∞—Ç—å'
        ]
        is_greeting = any(greeting in user_message.lower() for greeting in greeting_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—â–∞–Ω–∏—è
        farewell_keywords = [
            '–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–¥–æ –≤—Å—Ç—Ä–µ—á–∏', '—Å–ø–∞—Å–∏–±–æ', 
            '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'bye', 'goodbye', 'thanks'
        ]
        is_farewell = any(farewell in user_message.lower() for farewell in farewell_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å—ã
        question_keywords = [
            '—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', 
            '–∫–∞–∫–∏–µ', '–∫–∞–∫–æ–π', '—Å–∫–æ–ª—å–∫–æ', '–µ—Å—Ç—å –ª–∏', '–º–æ–∂–Ω–æ –ª–∏'
        ]
        is_question = (
            any(question in user_message.lower() for question in question_keywords) 
            or user_message.strip().endswith('?')
        )
        
        if is_greeting:
            return self._get_greeting_response(user_name)
        elif is_farewell:
            return self._get_farewell_response(user_name)
        elif not is_question and len(user_message.split()) < 3:
            return self._get_help_response(user_name)
        else:
            return await self._get_faq_response(user_message)
            
    def _get_greeting_response(self, user_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return (
            f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n"
            "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ OptFM –≤ MAX –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–µ. "
            "–ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö.\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ?\n"
            "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏—è?\n\n"
            "–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø–æ–º–æ—â—å' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        
    def _get_farewell_response(self, user_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—â–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return (
            f"üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user_name}!\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ OptFM. "
            "–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, —è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\n\n"
            "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üòä"
        )
        
    def _get_help_response(self, user_name: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø—Ä–∞–≤–æ—á–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        return (
            f"ü§î {user_name}, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
            "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö OptFM, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ?\n"
            "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
            "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏—è?\n\n"
            "–Ø —Ä–∞–±–æ—Ç–∞—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é."
        )
        
    async def _get_faq_response(self, user_message: str) -> str:
        """
        –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ –±–∞–∑–µ
        
        Args:
            user_message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç–≤–µ—Ç –∏–∑ FAQ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ
        faq_answer = self.faq_manager.search_faq(user_message)
        
        if faq_answer:
            logger.info(f"FAQ answer found: {faq_answer['id']}")
            return (
                f"ü§ñ {faq_answer['answer']}\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"
            )
        else:
            logger.info("FAQ answer not found")
            return (
                f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: \"{user_message}\"\n\n"
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, "
                "–∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n"
                "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã?\n"
                "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —Ü–µ–Ω—ã?\n\n"
                "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏:\n"
                "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n"
                "‚Ä¢ Email: info@optfm.ru"
            )
    
    async def get_me(self) -> Optional[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
        
        Returns:
            dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
        """
        try:
            session = await self._get_session()
            
            async with session.get(f"{self.base_url}/getMe") as response:
                if response.status == 200:
                    result = await response.json()
                    logger.info("Bot info retrieved successfully")
                    return result
                else:
                    logger.error(f"Failed to get bot info: {response.status}")
                    return None
                    
        except Exception as e:
            logger.error(f"Error getting bot info: {e}")
            return None
    
    async def set_webhook(self, webhook_url: str, secret_token: str = None) -> bool:
        """
        –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook'–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            webhook_url: URL –¥–ª—è webhook'–∞
            secret_token: –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            
        Returns:
            bool: –£—Å–ø–µ—Ö —É—Å—Ç–∞–Ω–æ–≤–∫–∏
        """
        try:
            session = await self._get_session()
            
            payload = {"url": webhook_url}
            if secret_token:
                payload["secret_token"] = secret_token
            
            async with session.post(f"{self.base_url}/setWebhook", json=payload) as response:
                if response.status == 200:
                    logger.info(f"Webhook set successfully: {webhook_url}")
                    return True
                else:
                    error_text = await response.text()
                    logger.error(f"Failed to set webhook: {response.status} - {error_text}")
                    return False
                    
        except Exception as e:
            logger.error(f"Error setting webhook: {e}")
            return False
    
    async def delete_webhook(self) -> bool:
        """
        –£–¥–∞–ª–µ–Ω–∏–µ webhook'–∞
        
        Returns:
            bool: –£—Å–ø–µ—Ö —É–¥–∞–ª–µ–Ω–∏—è
        """
        try:
            session = await self._get_session()
            
            async with session.post(f"{self.base_url}/deleteWebhook") as response:
                if response.status == 200:
                    logger.info("Webhook deleted successfully")
                    return True
                else:
                    logger.error(f"Failed to delete webhook: {response.status}")
                    return False
                    
        except Exception as e:
            logger.error(f"Error deleting webhook: {e}")
            return False
                
    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ HTTP —Å–µ—Å—Å–∏–∏"""
        if self.session:
            await self.session.close()
            logger.info("MAX bot session closed")
            
    async def __aenter__(self):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ async context manager"""
        return self
        
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        """–ü–æ–¥–¥–µ—Ä–∂–∫–∞ async context manager"""
        await self.close()


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    async def main():
        # –ü—Ä–∏–º–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        api_key = "your_max_api_key_here"
        
        async with OptFMMaxBot(api_key) as bot:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
            bot_info = await bot.get_me()
            print(f"Bot info: {bot_info}")
            
            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook'–∞
            webhook_url = "https://yourdomain.com/webhook/max/"
            success = await bot.set_webhook(webhook_url)
            print(f"Webhook set: {success}")
            
            # –ü—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            test_message = {
                "message_id": 123,
                "from": {
                    "id": "user123",
                    "first_name": "–¢–µ—Å—Ç",
                    "username": "testuser"
                },
                "chat": {
                    "id": "chat123",
                    "type": "private"
                },
                "date": 1234567890,
                "text": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã?"
            }
            
            response = await bot.handle_message(test_message)
            print(f"Bot response: {response}")
    
    # asyncio.run(main())
    pass
