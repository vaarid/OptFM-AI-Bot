"""
Telegram Bot Module for OptFM AI Bot
"""
import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from faq.enhanced_faq_manager import EnhancedFAQManager

logger = logging.getLogger(__name__)

class OptFMBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è OptFM"""
    
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token: Telegram Bot Token
        """
        self.token = token
        self.application = Application.builder().token(token).build()
        self.faq_manager = EnhancedFAQManager()
        self._setup_handlers()
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq
        self.application.add_handler(CommandHandler("faq", self.faq_command))
        

        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫)
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤ FAQ)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.echo_message))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        user = update.effective_user
        welcome_message = (
            f"üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ OptFM. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        
        await update.message.reply_text(welcome_message)
        logger.info(f"User {user.id} ({user.username}) started the bot")
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        help_message = (
            "ü§ñ **OptFM AI Bot - –°–ø—Ä–∞–≤–∫–∞**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/faq - –ü–æ–∫–∞–∑–∞—Ç—å FAQ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏\n\n"
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö OptFM\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã?\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ü–µ–Ω–∞—Ö\n"
            "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n\n"

            "**–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ FAQ:**\n"
            "–ö–æ–º–∞–Ω–¥–∞ /faq –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫. –ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å!"
        )
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
        logger.info(f"User {update.effective_user.id} requested help")
        
    async def faq_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 10)
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        faq_list = self.faq_manager.get_all_faq()
        
        if not faq_list:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–∑–∞ FAQ –ø—É—Å—Ç–∞.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        start_index = 0
        end_index = min(10, len(faq_list))
        current_faq_list = faq_list[start_index:end_index]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
        keyboard = []
        
        for faq in current_faq_list:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
            button_text = faq['question']
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
            if len(button_text) > 50:
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                cut_point = button_text[:50].rfind(' ')
                if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                    button_text = button_text[:cut_point] + "..."
                else:
                    button_text = button_text[:47] + "..."
            
            button = InlineKeyboardButton(
                text=f"{faq['id']}. {button_text}",
                callback_data=f"faq_{faq['id']}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
        if len(faq_list) > 10:
            keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_10")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        faq_text = (
            "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM:**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
            f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{len(current_faq_list)}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
        )
        
        await update.message.reply_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
        logger.info(f"User {update.effective_user.id} requested FAQ list with buttons (page 1)")
        
    async def echo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–º –≤ FAQ
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        user_message = update.message.text
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        greeting_keywords = ['–ø—Ä–∏–≤–µ—Ç', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', 'hi', 'hello']
        is_greeting = any(greeting in user_message.lower() for greeting in greeting_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—â–∞–Ω–∏–µ–º
        farewell_keywords = ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–¥–æ –≤—Å—Ç—Ä–µ—á–∏', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'bye', 'goodbye', 'thanks']
        is_farewell = any(farewell in user_message.lower() for farewell in farewell_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)
        question_keywords = ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–∏–µ', '–∫–∞–∫–æ–π', '—Å–∫–æ–ª—å–∫–æ', '–µ—Å—Ç—å –ª–∏', '–º–æ–∂–Ω–æ –ª–∏']
        is_question = any(question in user_message.lower() for question in question_keywords) or user_message.strip().endswith('?')
        
        if is_greeting:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –¥–∞–µ–º –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –æ—Ç–≤–µ—Ç
            response = (
                f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ OptFM. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö.\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ?\n"
                "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
                "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏—è?\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message}")
        elif is_farewell:
            # –ü—Ä–æ—â–∞–Ω–∏–µ - –¥–∞–µ–º –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            response = (
                f"üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user.first_name}!\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ OptFM. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, "
                "—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\n\n"
                "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è! üòä"
            )
            logger.info(f"–ü—Ä–æ—â–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message}")
        elif not is_question and len(user_message.split()) < 3:
            # –ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å
            response = (
                f"ü§î {user.first_name}, —è –Ω–µ —Å–æ–≤—Å–µ–º –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å.\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö OptFM, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ?\n"
                "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
                "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏—è?\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
            logger.info(f"–ö–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message}")
        else:
            # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ
            faq_answer = self.faq_manager.search_faq(user_message)
            
            if faq_answer:
                # –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ FAQ
                response = f"ü§ñ {faq_answer['answer']}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"
                logger.info(f"FAQ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {faq_answer['id']}")
            else:
                # –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                response = (
                    f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: \"{user_message}\"\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n"
                    "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã?\n"
                    "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
                    "‚Ä¢ –ö–∞–∫–∏–µ —Ü–µ–Ω—ã?"
                )
                logger.info(f"FAQ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message[:50]}...")
        
        await update.message.reply_text(response)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É FAQ
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        stats = self.faq_manager.get_statistics()
        
        stats_message = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FAQ OptFM:**\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_faq']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['total_keywords']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {stats['average_keywords_per_faq']}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: {stats['search_index_size']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
        )
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        logger.info(f"User {update.effective_user.id} requested FAQ statistics")
    
    async def similar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /similar - –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if not context.args:
            await update.message.reply_text(
                "üîç **–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/similar –≤–∞—à –≤–æ–ø—Ä–æ—Å`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/similar –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä`",
                parse_mode='Markdown'
            )
            return
        
        query = " ".join(context.args)
        similar_questions = self.faq_manager.search_similar_questions(query, limit=3)
        
        if not similar_questions:
            await update.message.reply_text(
                f"‚ùå –ü–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è \"{query}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
            )
            return
        
        similar_message = f"üîç **–ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è \"{query}\":**\n\n"
        
        for i, faq in enumerate(similar_questions, 1):
            similar_message += f"{i}. **{faq['question']}**\n"
        
        similar_message += "\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞!"
        
        await update.message.reply_text(similar_message, parse_mode='Markdown')
        logger.info(f"User {update.effective_user.id} searched for similar questions: {query}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        user = update.effective_user
        callback_data = query.data
        
        logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {callback_data}")
        
        if callback_data == "faq_back_to_list":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É FAQ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            faq_list = self.faq_manager.get_all_faq()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
            start_index = 0
            end_index = min(10, len(faq_list))
            current_faq_list = faq_list[start_index:end_index]
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
            keyboard = []
            
            for faq in current_faq_list:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                button_text = faq['question']
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                if len(button_text) > 50:
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                    cut_point = button_text[:50].rfind(' ')
                    if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                        button_text = button_text[:cut_point] + "..."
                    else:
                        button_text = button_text[:47] + "..."
                
                button = InlineKeyboardButton(
                    text=f"{faq['id']}. {button_text}",
                    callback_data=f"faq_{faq['id']}"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                keyboard.append([button])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
            if len(faq_list) > 10:
                keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_10")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            faq_text = (
                "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM:**\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{len(current_faq_list)}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
            )
            
            await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
            logger.info(f"User {user.id} returned to FAQ list (page 1)")
            
        elif callback_data.startswith("faq_"):
            faq_id = callback_data[4:]  # –£–±–∏—Ä–∞–µ–º "faq_" –∏–∑ –Ω–∞—á–∞–ª–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
            if faq_id.startswith("/"):
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
                logger.warning(f"User {user.id} sent invalid callback: {callback_data}")
                return
            
            if faq_id == "show_more_10":
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
                faq_list = self.faq_manager.get_all_faq()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å 11-–≥–æ –ø–æ 20-–π)
                start_index = 10
                end_index = min(20, len(faq_list))
                current_faq_list = faq_list[start_index:end_index]
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
                keyboard = []
                
                for faq in current_faq_list:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                    button_text = faq['question']
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                    if len(button_text) > 50:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                        cut_point = button_text[:50].rfind(' ')
                        if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                            button_text = button_text[:cut_point] + "..."
                        else:
                            button_text = button_text[:47] + "..."
                    
                    button = InlineKeyboardButton(
                        text=f"{faq['id']}. {button_text}",
                        callback_data=f"faq_{faq['id']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    keyboard.append([button])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", callback_data="faq_back_to_list")])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="faq_back_to_list")])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
                if len(faq_list) > 20:
                    keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_20")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                faq_text = (
                    "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2):**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{start_index + 1}-{end_index}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
                
                await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested FAQ page 2")
                
            elif faq_id == "show_more_20":
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å 21-–≥–æ –ø–æ 30-–π)
                faq_list = self.faq_manager.get_all_faq()
                
                start_index = 20
                end_index = min(30, len(faq_list))
                current_faq_list = faq_list[start_index:end_index]
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
                keyboard = []
                
                for faq in current_faq_list:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                    button_text = faq['question']
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                    if len(button_text) > 50:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                        cut_point = button_text[:50].rfind(' ')
                        if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                            button_text = button_text[:cut_point] + "..."
                        else:
                            button_text = button_text[:47] + "..."
                    
                    button = InlineKeyboardButton(
                        text=f"{faq['id']}. {button_text}",
                        callback_data=f"faq_{faq['id']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    keyboard.append([button])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", callback_data="faq_back_to_list")])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="faq_show_more_10")])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
                if len(faq_list) > 30:
                    keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_30")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                faq_text = (
                    "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 3):**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{start_index + 1}-{end_index}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
                
                await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested FAQ page 3")
                
            elif faq_id == "show_more_30":
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã (—Å 31-–≥–æ)
                faq_list = self.faq_manager.get_all_faq()
                
                start_index = 30
                end_index = len(faq_list)
                current_faq_list = faq_list[start_index:end_index]
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
                keyboard = []
                
                for faq in current_faq_list:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                    button_text = faq['question']
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                    if len(button_text) > 50:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                        cut_point = button_text[:50].rfind(' ')
                        if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                            button_text = button_text[:cut_point] + "..."
                        else:
                            button_text = button_text[:47] + "..."
                    
                    button = InlineKeyboardButton(
                        text=f"{faq['id']}. {button_text}",
                        callback_data=f"faq_{faq['id']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    keyboard.append([button])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", callback_data="faq_back_to_list")])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="faq_show_more_20")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                faq_text = (
                    "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞):**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{start_index + 1}-{end_index}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
                
                await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested FAQ final page")
                
            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π FAQ
                try:
                    faq_id = int(faq_id)
                    faq = self.faq_manager.get_faq_by_id(faq_id)
                    
                    if faq:
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                        keyboard = []
                        
                        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
                        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="faq_back_to_list")])
                        
                        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if faq_id < len(self.faq_manager.get_all_faq()):
                            keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"faq_{faq_id + 1}")])
                        
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        answer_text = (
                            f"ü§ñ **{faq['question']}**\n\n"
                            f"{faq['answer']}\n\n"
                            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"
                        )
                        
                        await query.edit_message_text(answer_text, parse_mode='Markdown', reply_markup=reply_markup)
                        logger.info(f"User {user.id} viewed FAQ {faq_id}")
                        
                    else:
                        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        logger.warning(f"User {user.id} requested non-existent FAQ {faq_id}")
                        
                except ValueError:
                    await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞.")
                    logger.warning(f"User {user.id} requested invalid FAQ ID: {faq_id}")
        
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("Starting Telegram bot polling...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Telegram bot...")
        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()
