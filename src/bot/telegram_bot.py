"""
Telegram Bot Module for OptFM AI Bot
"""
import logging
from typing import Dict, Any
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))
from faq.enhanced_faq_manager import EnhancedFAQManager
from rag.product_rag_manager import ProductRAGManager

logger = logging.getLogger(__name__)

class OptFMBot:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å Telegram –±–æ—Ç–∞ –¥–ª—è OptFM"""
    
    def __init__(self, token: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
        
        Args:
            token: Telegram Bot Token
        """
        self.token = token
        self.application = Application.builder().token(token).build()
        self.faq_manager = EnhancedFAQManager()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º RAG –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        try:
            self.rag_manager = ProductRAGManager()
            logger.info("RAG –º–µ–Ω–µ–¥–∂–µ—Ä —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG –º–µ–Ω–µ–¥–∂–µ—Ä–∞: {e}")
            self.rag_manager = None
        
        self._setup_handlers()
        
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        self.application.add_handler(CommandHandler("start", self.start_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        self.application.add_handler(CommandHandler("help", self.help_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq
        self.application.add_handler(CommandHandler("faq", self.faq_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤
        self.application.add_handler(CommandHandler("search", self.search_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.application.add_handler(CommandHandler("categories", self.categories_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manufacturers –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
        self.application.add_handler(CommandHandler("manufacturers", self.manufacturers_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫)
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø–æ–∏—Å–∫ –≤ FAQ)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.echo_message))
        
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        user = update.effective_user
        welcome_message = (
            f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
            "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ OptFM. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        
        await update.message.reply_text(welcome_message)
        logger.info(f"User {user.id} ({user.username}) started the bot")
        
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        help_message = (
            "ü§ñ **OptFM AI Bot - –°–ø—Ä–∞–≤–∫–∞**\n\n"
            "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/faq - –ü–æ–∫–∞–∑–∞—Ç—å FAQ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏\n"
            "/search - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "/categories - –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤\n"
            "/manufacturers - –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Ç–µ—Ö–Ω–∏–∫–∏\n\n"
            "**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö OptFM\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /search –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –ø–æ–∏—Å–∫–∞\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞\n\n"
            "**–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤:**\n"
            "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ /search –∏ –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å\n"
            "‚Ä¢ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ: Samsung, iPhone, FM –º–æ–¥—É–ª—è—Ç–æ—Ä\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
            "‚Ä¢ Samsung\n"
            "‚Ä¢ iPhone\n"
            "‚Ä¢ FM –º–æ–¥—É–ª—è—Ç–æ—Ä\n"
            "‚Ä¢ –∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ\n"
            "‚Ä¢ –Ω–∞—É—à–Ω–∏–∫–∏\n"
            "‚Ä¢ –∑–∞—Ä—è–¥–∫–∞\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
            "‚Ä¢ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã?\n"
            "‚Ä¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ü–µ–Ω–∞—Ö\n"
            "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n\n"
            "**–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
            "–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —É–¥–æ–±–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!"
        )
        
        await update.message.reply_text(help_message, parse_mode='Markdown')
        logger.info(f"User {update.effective_user.id} requested help")
        
    async def faq_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /faq - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç FAQ —Å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ 10)
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        faq_list = self.faq_manager.get_all_faq()
        
        if not faq_list:
            await update.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±–∞–∑–∞ FAQ –ø—É—Å—Ç–∞.")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
        start_index = 0
        end_index = min(10, len(faq_list))
        current_faq_list = faq_list[start_index:end_index]
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
        keyboard = []
        
        for faq in current_faq_list:
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
            button_text = faq['question']
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
            if len(button_text) > 50:
                # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                cut_point = button_text[:50].rfind(' ')
                if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                    button_text = button_text[:cut_point] + "..."
                else:
                    button_text = button_text[:47] + "..."
            
            button = InlineKeyboardButton(
                text=f"{faq['id']}. {button_text}",
                callback_data=f"faq_{faq['id']}"
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            keyboard.append([button])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
        if len(faq_list) > 10:
            keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_10")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        faq_text = (
            "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM:**\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
            f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{len(current_faq_list)}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
        )
        
        await update.message.reply_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
        logger.info(f"User {update.effective_user.id} requested FAQ list with buttons (page 1)")
        
    async def echo_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –ø–æ–∏—Å–∫–æ–º –≤ FAQ –∏ —Ç–æ–≤–∞—Ä–∞—Ö
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        user_message = update.message.text
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞
        if context.user_data.get('search_mode', False):
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –ø–æ–∏—Å–∫–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
            await self._perform_search(update, user_message)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
            context.user_data['search_mode'] = False
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º
        greeting_keywords = ['–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ', '–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π', '–¥–æ–±—Ä—ã–π –¥–µ–Ω—å', '–¥–æ–±—Ä—ã–π –≤–µ—á–µ—Ä', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ', 'hi', 'hello']
        is_greeting = any(greeting in user_message.lower() for greeting in greeting_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—â–∞–Ω–∏–µ–º
        farewell_keywords = ['–ø–æ–∫–∞', '–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è', '–¥–æ –≤—Å—Ç—Ä–µ—á–∏', '—Å–ø–∞—Å–∏–±–æ', '–±–ª–∞–≥–æ–¥–∞—Ä—é', 'bye', 'goodbye', 'thanks']
        is_farewell = any(farewell in user_message.lower() for farewell in farewell_keywords)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–º (—Å–æ–¥–µ—Ä–∂–∏—Ç –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞)
        question_keywords = ['—á—Ç–æ', '–∫–∞–∫', '–≥–¥–µ', '–∫–æ–≥–¥–∞', '–ø–æ—á–µ–º—É', '–∑–∞—á–µ–º', '–∫–∞–∫–∏–µ', '–∫–∞–∫–æ–π', '—Å–∫–æ–ª—å–∫–æ', '–µ—Å—Ç—å –ª–∏', '–º–æ–∂–Ω–æ –ª–∏']
        is_question = any(question in user_message.lower() for question in question_keywords) or user_message.strip().endswith('?')
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–µ—Ç –ª–∏ —ç—Ç–æ –±—ã—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–æ–ø—Ä–æ—Å–∞)
        is_potential_search = len(user_message.split()) <= 3 and not is_question and not is_greeting and not is_farewell
        
        if is_greeting:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ - –¥–∞–µ–º –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            response = (
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user.first_name}!\n\n"
                "–Ø –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ OptFM. –ú–æ–≥—É –ø–æ–º–æ—á—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—à–∏—Ö –ø—Ä–æ–¥—É–∫—Ç–∞—Ö –∏ —É—Å–ª—É–≥–∞—Ö.\n\n"
                "–ó–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —Ç–æ–≤–∞—Ä—ã –≤—ã –ø—Ä–æ–¥–∞–µ—Ç–µ?\n"
                "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
                "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏—è?\n\n"
                "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            )
            logger.info(f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message}")
        elif is_farewell:
            # –ü—Ä–æ—â–∞–Ω–∏–µ - –¥–∞–µ–º –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
            response = (
                f"–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, {user.first_name}!\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ OptFM. –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤—è—Ç—Å—è –≤–æ–ø—Ä–æ—Å—ã, "
                "—è –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!\n\n"
                "–£–¥–∞—á–Ω–æ–≥–æ –¥–Ω—è!"
            )
            logger.info(f"–ü—Ä–æ—â–∞–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message}")
        elif is_potential_search:
            # –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–∏—Å–∫
            response = (
                f"üîç –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—â–µ—Ç–µ —Ç–æ–≤–∞—Ä: \"{user_message}\"\n\n"
                "–•–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ —Ç–æ–≤–∞—Ä–æ–≤?\n\n"
                "–ò–ª–∏ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö OptFM."
            )
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
            keyboard = [
                [InlineKeyboardButton("üîç –î–∞, –Ω–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä", callback_data=f"search_query_{user_message}")],
                [InlineKeyboardButton("üìö –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(response, reply_markup=reply_markup)
            logger.info(f"–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message}")
            return
        else:
            # –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ FAQ
            faq_answer = self.faq_manager.search_faq(user_message)
            
            if faq_answer:
                # –ù–∞–π–¥–µ–Ω –æ—Ç–≤–µ—Ç –≤ FAQ
                response = f"ü§ñ {faq_answer['answer']}\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"
                logger.info(f"FAQ –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {faq_answer['id']}")
            else:
                # –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
                response = (
                    f"üìù –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: \"{user_message}\"\n\n"
                    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–æ—á–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π. "
                    "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∑–∞—è–≤–∫—É, –∏ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n\n"
                    "–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                    "‚Ä¢ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã?\n"
                    "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
                    "‚Ä¢ –ö–∞–∫–∏–µ —Ü–µ–Ω—ã?"
                )
                logger.info(f"FAQ –æ—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {user_message[:50]}...")
        
        await update.message.reply_text(response)
    
    async def search_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if not self.rag_manager:
            await update.message.reply_text(
                "‚ùå –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        if context.args:
            query = " ".join(context.args)
            await self._perform_search(update, query)
            return
        
        # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
        search_message = (
            "üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ OptFM**\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, "
            "–∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä.\n\n"
            "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
            "‚Ä¢ Samsung\n"
            "‚Ä¢ iPhone\n"
            "‚Ä¢ FM –º–æ–¥—É–ª—è—Ç–æ—Ä\n"
            "‚Ä¢ –∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ\n"
            "‚Ä¢ –Ω–∞—É—à–Ω–∏–∫–∏\n"
            "‚Ä¢ –∑–∞—Ä—è–¥–∫–∞"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard = [
            [InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="search_categories")],
            [InlineKeyboardButton("üè≠ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data="search_manufacturers")],
            [InlineKeyboardButton("üîç –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="search_popular")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            search_message,
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        context.user_data['search_mode'] = True
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫")
    
    async def _perform_search(self, update: Update, query: str):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        """
        user = update.effective_user
        
        try:
            # –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º
            products = self.rag_manager.search_products(query, top_k=10)
            
            if not products:
                # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
                await self._handle_no_results(update, query)
                return
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
            categories_found = set()
            manufacturers_found = set()
            
            for product in products:
                if product.get('category'):
                    categories_found.add(product['category'])
                if product.get('device_manufacturers'):
                    manufacturers_found.update(product['device_manufacturers'])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            search_message = f"üîç **–ü–æ–∏—Å–∫: \"{query}\"**\n\n"
            
            if len(products) <= 5:
                search_message += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: **{len(products)}**\n\n"
            else:
                search_message += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: **{len(products)}** (–ø–æ–∫–∞–∑–∞–Ω–æ 5)\n\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ª—É—á—à–µ–≥–æ UX
            display_products = products[:5]
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
            keyboard = []
            
            for i, product in enumerate(display_products, 1):
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
                button_text = f"{i}. {product['name'][:40]}"
                if len(product['name']) > 40:
                    button_text += "..."
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É
                keyboard.append([InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"product_{product['id']}"
                )])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                category = product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')
                brand = product.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')
                search_message += f"**{i}.** {product['name']}\n"
                search_message += f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n"
                search_message += f"    –ë—Ä–µ–Ω–¥: {brand}\n\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —É–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if categories_found:
                keyboard.append([InlineKeyboardButton("üìÇ –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="search_categories")])
            
            if manufacturers_found:
                keyboard.append([InlineKeyboardButton("üè≠ –£—Ç–æ—á–Ω–∏—Ç—å –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º", callback_data="search_manufacturers")])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
            keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_new")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                search_message, 
                parse_mode='Markdown', 
                reply_markup=reply_markup
            )
            
            logger.info(f"–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: –Ω–∞–π–¥–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ '{query}'")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def _handle_no_results(self, update: Update, query: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        """
        user = update.effective_user
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
        try:
            # –ò—â–µ–º —Ç–æ–≤–∞—Ä—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
            similar_products = self.rag_manager.search_products(query, top_k=3)
            
            if similar_products:
                no_results_message = (
                    f"üîç **–ü–æ–∏—Å–∫: \"{query}\"**\n\n"
                    "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    "**–í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏—Å–∫–∞–ª–∏:**\n"
                )
                
                keyboard = []
                for i, product in enumerate(similar_products, 1):
                    no_results_message += f"‚Ä¢ {product['name']}\n"
                    keyboard.append([InlineKeyboardButton(
                        text=f"–ü–æ–∫–∞–∑–∞—Ç—å: {product['name'][:30]}...",
                        callback_data=f"product_{product['id']}"
                    )])
                
                keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_new")])
                keyboard.append([InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="search_categories")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await update.message.reply_text(
                    no_results_message,
                    parse_mode='Markdown',
                    reply_markup=reply_markup
                )
            else:
                # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ–±—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                await update.message.reply_text(
                    f"üîç **–ü–æ–∏—Å–∫: \"{query}\"**\n\n"
                    "‚ùå –¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n\n"
                    "**–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:**\n"
                    "‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å\n"
                    "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –æ–±—â–∏–µ —Ç–µ—Ä–º–∏–Ω—ã\n"
                    "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                    "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
                    "‚Ä¢ Samsung\n"
                    "‚Ä¢ iPhone\n"
                    "‚Ä¢ –∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ\n"
                    "‚Ä¢ –∑–∞—Ä—è–¥–∫–∞\n"
                    "‚Ä¢ –Ω–∞—É—à–Ω–∏–∫–∏"
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def categories_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if not self.rag_manager:
            await update.message.reply_text(
                "‚ùå –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        try:
            categories = self.rag_manager.get_categories()
            
            if not categories:
                await update.message.reply_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            categories_message = "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ OptFM:**\n\n"
            
            keyboard = []
            for i, category in enumerate(categories[:20], 1):
                categories_message += f"**{i}.** {category}\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                button_text = category[:30] + "..." if len(category) > 30 else category
                keyboard.append([InlineKeyboardButton(
                    text=f"{i}. {button_text}",
                    callback_data=f"category_{category}"
                )])
            
            if len(categories) > 20:
                categories_message += f"\n... –∏ –µ—â–µ **{len(categories) - 20}** –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="categories_more")])
            
            keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="search_new")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                categories_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    
    async def manufacturers_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /manufacturers - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Ç–µ—Ö–Ω–∏–∫–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if not self.rag_manager:
            await update.message.reply_text(
                "‚ùå –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        try:
            manufacturers = self.rag_manager.get_device_manufacturers()
            
            if not manufacturers:
                await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
            manufacturers_message = "üè≠ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏:**\n\n"
            
            keyboard = []
            for i, manufacturer in enumerate(manufacturers[:15], 1):
                manufacturers_message += f"**{i}.** {manufacturer}\n"
                
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è
                keyboard.append([InlineKeyboardButton(
                    text=f"{i}. {manufacturer}",
                    callback_data=f"manufacturer_{manufacturer}"
                )])
            
            if len(manufacturers) > 15:
                manufacturers_message += f"\n... –∏ –µ—â–µ **{len(manufacturers) - 15}** –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
                keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="manufacturers_more")])
            
            keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="search_new")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                manufacturers_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É FAQ
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        stats = self.faq_manager.get_statistics()
        
        stats_message = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ FAQ OptFM:**\n\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {stats['total_faq']}\n"
            f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {stats['total_keywords']}\n"
            f"‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å: {stats['average_keywords_per_faq']}\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: {stats['search_index_size']}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"
        )
        
        await update.message.reply_text(stats_message, parse_mode='Markdown')
        logger.info(f"User {update.effective_user.id} requested FAQ statistics")
    
    async def similar_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /similar - –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        if not context.args:
            await update.message.reply_text(
                "üîç **–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤**\n\n"
                "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: `/similar –≤–∞—à –≤–æ–ø—Ä–æ—Å`\n\n"
                "–ü—Ä–∏–º–µ—Ä: `/similar –∫–∞–∫ –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä`",
                parse_mode='Markdown'
            )
            return
        
        query = " ".join(context.args)
        similar_questions = self.faq_manager.search_similar_questions(query, limit=3)
        
        if not similar_questions:
            await update.message.reply_text(
                f"‚ùå –ü–æ—Ö–æ–∂–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è \"{query}\" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /faq –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–æ–≤."
            )
            return
        
        similar_message = f"üîç **–ü–æ—Ö–æ–∂–∏–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è \"{query}\":**\n\n"
        
        for i, faq in enumerate(similar_questions, 1):
            similar_message += f"{i}. **{faq['question']}**\n"
        
        similar_message += "\n–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –∏–∑ —ç—Ç–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞!"
        
        await update.message.reply_text(similar_message, parse_mode='Markdown')
        logger.info(f"User {update.effective_user.id} searched for similar questions: {query}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        
        Args:
            update: –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞
        """
        query = update.callback_query
        await query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" —É –∫–Ω–æ–ø–∫–∏
        
        user = update.effective_user
        callback_data = query.data
        
        logger.info(f"Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {callback_data}")
        
        if callback_data == "faq_back_to_list":
            # –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É FAQ (–ø–µ—Ä–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞)
            faq_list = self.faq_manager.get_all_faq()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
            start_index = 0
            end_index = min(10, len(faq_list))
            current_faq_list = faq_list[start_index:end_index]
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
            keyboard = []
            
            for faq in current_faq_list:
                # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                button_text = faq['question']
                
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                if len(button_text) > 50:
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                    cut_point = button_text[:50].rfind(' ')
                    if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                        button_text = button_text[:cut_point] + "..."
                    else:
                        button_text = button_text[:47] + "..."
                
                button = InlineKeyboardButton(
                    text=f"{faq['id']}. {button_text}",
                    callback_data=f"faq_{faq['id']}"
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                keyboard.append([button])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
            if len(faq_list) > 10:
                keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_10")])
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            faq_text = (
                "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM:**\n\n"
                "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{len(current_faq_list)}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
            )
            
            await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
            logger.info(f"User {user.id} returned to FAQ list (page 1)")
            
        elif callback_data.startswith("faq_"):
            faq_id = callback_data[4:]  # –£–±–∏—Ä–∞–µ–º "faq_" –∏–∑ –Ω–∞—á–∞–ª–∞
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞
            if faq_id.startswith("/"):
                await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
                logger.warning(f"User {user.id} sent invalid callback: {callback_data}")
                return
            
            if faq_id == "show_more_10":
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤
                faq_list = self.faq_manager.get_all_faq()
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å 11-–≥–æ –ø–æ 20-–π)
                start_index = 10
                end_index = min(20, len(faq_list))
                current_faq_list = faq_list[start_index:end_index]
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
                keyboard = []
                
                for faq in current_faq_list:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                    button_text = faq['question']
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                    if len(button_text) > 50:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                        cut_point = button_text[:50].rfind(' ')
                        if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                            button_text = button_text[:cut_point] + "..."
                        else:
                            button_text = button_text[:47] + "..."
                    
                    button = InlineKeyboardButton(
                        text=f"{faq['id']}. {button_text}",
                        callback_data=f"faq_{faq['id']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    keyboard.append([button])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", callback_data="faq_back_to_list")])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="faq_back_to_list")])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
                if len(faq_list) > 20:
                    keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_20")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                faq_text = (
                    "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 2):**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{start_index + 1}-{end_index}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
                
                await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested FAQ page 2")
                
            elif faq_id == "show_more_20":
                # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å 21-–≥–æ –ø–æ 30-–π)
                faq_list = self.faq_manager.get_all_faq()
                
                start_index = 20
                end_index = min(30, len(faq_list))
                current_faq_list = faq_list[start_index:end_index]
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
                keyboard = []
                
                for faq in current_faq_list:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                    button_text = faq['question']
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                    if len(button_text) > 50:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                        cut_point = button_text[:50].rfind(' ')
                        if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                            button_text = button_text[:cut_point] + "..."
                        else:
                            button_text = button_text[:47] + "..."
                    
                    button = InlineKeyboardButton(
                        text=f"{faq['id']}. {button_text}",
                        callback_data=f"faq_{faq['id']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    keyboard.append([button])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", callback_data="faq_back_to_list")])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="faq_show_more_10")])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë" –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã
                if len(faq_list) > 30:
                    keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë", callback_data="faq_show_more_30")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                faq_text = (
                    "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ 3):**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{start_index + 1}-{end_index}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
                
                await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested FAQ page 3")
                
            elif faq_id == "show_more_30":
                # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –≤–æ–ø—Ä–æ—Å—ã (—Å 31-–≥–æ)
                faq_list = self.faq_manager.get_all_faq()
                
                start_index = 30
                end_index = len(faq_list)
                current_faq_list = faq_list[start_index:end_index]
                
                # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è FAQ
                keyboard = []
                
                for faq in current_faq_list:
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º –≤–æ–ø—Ä–æ—Å–∞ (—É–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–±—Ä–µ–∑–∞–Ω–∏–µ)
                    button_text = faq['question']
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏ —É–ª—É—á—à–∞–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ
                    if len(button_text) > 50:
                        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø—Ä–æ–±–µ–ª –ø–µ—Ä–µ–¥ 50-–º —Å–∏–º–≤–æ–ª–æ–º
                        cut_point = button_text[:50].rfind(' ')
                        if cut_point > 30:  # –ï—Å–ª–∏ –ø—Ä–æ–±–µ–ª –Ω–∞–π–¥–µ–Ω –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–æ –∫ –Ω–∞—á–∞–ª—É
                            button_text = button_text[:cut_point] + "..."
                        else:
                            button_text = button_text[:47] + "..."
                    
                    button = InlineKeyboardButton(
                        text=f"{faq['id']}. {button_text}",
                        callback_data=f"faq_{faq['id']}"
                    )
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 1 –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                    keyboard.append([button])
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –Ω–∞—á–∞–ª—É", callback_data="faq_back_to_list")])
                keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="faq_show_more_20")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                faq_text = (
                    "üìö **–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã OptFM (–ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞):**\n\n"
                    "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:\n\n"
                    f"–ü–æ–∫–∞–∑–∞–Ω–æ: **{start_index + 1}-{end_index}** –∏–∑ **{len(faq_list)}** –≤–æ–ø—Ä–æ—Å–æ–≤"
                )
                
                await query.edit_message_text(faq_text, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested FAQ final page")
                
            else:
                # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π FAQ
                try:
                    faq_id = int(faq_id)
                    faq = self.faq_manager.get_faq_by_id(faq_id)
                    
                    if faq:
                        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                        keyboard = []
                        
                        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É"
                        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="faq_back_to_list")])
                        
                        # –ö–Ω–æ–ø–∫–∞ "–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" (–µ—Å–ª–∏ –µ—Å—Ç—å)
                        if faq_id < len(self.faq_manager.get_all_faq()):
                            keyboard.append([InlineKeyboardButton("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å", callback_data=f"faq_{faq_id + 1}")])
                        
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        
                        answer_text = (
                            f"ü§ñ **{faq['question']}**\n\n"
                            f"{faq['answer']}\n\n"
                            f"–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å —Å–ø—Ä–∞—à–∏–≤–∞—Ç—å!"
                        )
                        
                        await query.edit_message_text(answer_text, parse_mode='Markdown', reply_markup=reply_markup)
                        logger.info(f"User {user.id} viewed FAQ {faq_id}")
                        
                    else:
                        await query.edit_message_text("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                        logger.warning(f"User {user.id} requested non-existent FAQ {faq_id}")
                        
                except ValueError:
                    await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –≤–æ–ø—Ä–æ—Å–∞.")
                    logger.warning(f"User {user.id} requested invalid FAQ ID: {faq_id}")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞
        elif callback_data.startswith("product_"):
            # –ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞
            product_id = callback_data[8:]  # –£–±–∏—Ä–∞–µ–º "product_" –∏–∑ –Ω–∞—á–∞–ª–∞
            
            if not self.rag_manager:
                await query.edit_message_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
                return
            
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä –ø–æ —Ç–æ—á–Ω–æ–º—É ID
                product = self.rag_manager.get_product_by_id(product_id)
                
                if product:
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
                    product_info = f"üì¶ **{product['name']}**\n\n"
                    
                    if product.get('category'):
                        product_info += f"**–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {product['category']}\n"
                    
                    if product.get('subcategory'):
                        product_info += f"**–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è:** {product['subcategory']}\n"
                    
                    if product.get('brand') and product['brand'] != 'Unknown':
                        product_info += f"**–ë—Ä–µ–Ω–¥:** {product['brand']}\n"
                    
                    if product.get('device_manufacturers'):
                        manufacturers = ", ".join(product['device_manufacturers'])
                        product_info += f"**–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å:** {manufacturers}\n"
                    
                    if product.get('description'):
                        product_info += f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {product['description']}\n"
                    
                    product_info += f"\n**–¶–µ–Ω–∞:** {product.get('price', '–£—Ç–æ—á–Ω—è–π—Ç–µ —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞')}\n\n"
                    product_info += "üí¨ –î–ª—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º!"
                    
                    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
                    keyboard = [
                        [InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_new")],
                        [InlineKeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_categories")],
                        [InlineKeyboardButton("üè≠ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏", callback_data="search_manufacturers")]
                    ]
                    
                    reply_markup = InlineKeyboardMarkup(keyboard)
                    
                    await query.edit_message_text(product_info, parse_mode='Markdown', reply_markup=reply_markup)
                    logger.info(f"User {user.id} viewed product details: {product_id}")
                    
                else:
                    await query.edit_message_text("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                    logger.warning(f"User {user.id} requested non-existent product: {product_id}")
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.")
        
        elif callback_data == "search_new":
            # –ù–æ–≤—ã–π –ø–æ–∏—Å–∫ - –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            search_message = (
                "üîç **–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ OptFM**\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–∫—Å–µ—Å—Å—É–∞—Ä–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è, "
                "–∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∞–∫—Å–µ—Å—Å—É–∞—Ä.\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**\n"
                "‚Ä¢ Samsung\n"
                "‚Ä¢ iPhone\n"
                "‚Ä¢ FM –º–æ–¥—É–ª—è—Ç–æ—Ä\n"
                "‚Ä¢ –∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ\n"
                "‚Ä¢ –Ω–∞—É—à–Ω–∏–∫–∏\n"
                "‚Ä¢ –∑–∞—Ä—è–¥–∫–∞"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            keyboard = [
                [InlineKeyboardButton("üìÇ –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–π", callback_data="search_categories")],
                [InlineKeyboardButton("üè≠ –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π", callback_data="search_manufacturers")],
                [InlineKeyboardButton("üîç –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã", callback_data="search_popular")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                search_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            context.user_data['search_mode'] = True
            logger.info(f"User {user.id} started interactive search")
        
        elif callback_data.startswith("search_query_"):
            # –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            query = callback_data[13:]  # –£–±–∏—Ä–∞–µ–º "search_query_" –∏–∑ –Ω–∞—á–∞–ª–∞
            await self._perform_search(update, query)
            logger.info(f"User {user.id} searched for: {query}")
        
        elif callback_data == "search_popular":
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            popular_message = (
                "üîç **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∑–∞–ø—Ä–æ—Å:"
            )
            
            keyboard = [
                [InlineKeyboardButton("üì± Samsung", callback_data="search_query_Samsung")],
                [InlineKeyboardButton("üçé iPhone", callback_data="search_query_iPhone")],
                [InlineKeyboardButton("üìª FM –º–æ–¥—É–ª—è—Ç–æ—Ä", callback_data="search_query_FM –º–æ–¥—É–ª—è—Ç–æ—Ä")],
                [InlineKeyboardButton("üõ°Ô∏è –ó–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ", callback_data="search_query_–∑–∞—â–∏—Ç–Ω–æ–µ —Å—Ç–µ–∫–ª–æ")],
                [InlineKeyboardButton("üéß –ù–∞—É—à–Ω–∏–∫–∏", callback_data="search_query_–Ω–∞—É—à–Ω–∏–∫–∏")],
                [InlineKeyboardButton("üîå –ó–∞—Ä—è–¥–∫–∞", callback_data="search_query_–∑–∞—Ä—è–¥–∫–∞")],
                [InlineKeyboardButton("üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_categories")],
                [InlineKeyboardButton("üîç –°–≤–æ–π –∑–∞–ø—Ä–æ—Å", callback_data="search_new")]
            ]
            
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(
                popular_message,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            logger.info(f"User {user.id} requested popular searches")
        
        elif callback_data == "ask_question":
            # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤ —Ä–µ–∂–∏–º –≤–æ–ø—Ä–æ—Å–æ–≤
            question_message = (
                "üìö **–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö OptFM**\n\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
                "**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã?\n"
                "‚Ä¢ –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?\n"
                "‚Ä¢ –ö–∞–∫–∏–µ —É—Å–ª–æ–≤–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏?\n"
                "‚Ä¢ –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –≥–∞—Ä–∞–Ω—Ç–∏—è?"
            )
            
            await query.edit_message_text(
                question_message,
                parse_mode='Markdown'
            )
            logger.info(f"User {user.id} switched to question mode")
        
        elif callback_data == "search_categories":
            # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if not self.rag_manager:
                await query.edit_message_text("‚ùå –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            try:
                categories = self.rag_manager.get_categories()
                
                if not categories:
                    await query.edit_message_text("‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                categories_message = "üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ OptFM:**\n\n"
                
                keyboard = []
                for i, category in enumerate(categories[:15], 1):
                    categories_message += f"**{i}.** {category}\n"
                    
                    button_text = category[:30] + "..." if len(category) > 30 else category
                    keyboard.append([InlineKeyboardButton(
                        text=f"{i}. {button_text}",
                        callback_data=f"category_{category}"
                    )])
                
                if len(categories) > 15:
                    categories_message += f"\n... –∏ –µ—â–µ **{len(categories) - 15}** –∫–∞—Ç–µ–≥–æ—Ä–∏–π\n"
                    keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="categories_more")])
                
                keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="search_new")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(categories_message, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested categories from search")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
        
        elif callback_data == "search_manufacturers":
            # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π
            if not self.rag_manager:
                await query.edit_message_text("‚ùå –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            try:
                manufacturers = self.rag_manager.get_device_manufacturers()
                
                if not manufacturers:
                    await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                manufacturers_message = "üè≠ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏ —Ç–µ—Ö–Ω–∏–∫–∏:**\n\n"
                
                keyboard = []
                for i, manufacturer in enumerate(manufacturers[:15], 1):
                    manufacturers_message += f"**{i}.** {manufacturer}\n"
                    
                    keyboard.append([InlineKeyboardButton(
                        text=f"{i}. {manufacturer}",
                        callback_data=f"manufacturer_{manufacturer}"
                    )])
                
                if len(manufacturers) > 15:
                    manufacturers_message += f"\n... –∏ –µ—â–µ **{len(manufacturers) - 15}** –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π\n"
                    keyboard.append([InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å –µ—â–µ", callback_data="manufacturers_more")])
                
                keyboard.append([InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="search_new")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(manufacturers_message, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} requested manufacturers from search")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π.")
        
        elif callback_data.startswith("category_"):
            # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            category = callback_data[9:]  # –£–±–∏—Ä–∞–µ–º "category_" –∏–∑ –Ω–∞—á–∞–ª–∞
            
            if not self.rag_manager:
                await query.edit_message_text("‚ùå –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            try:
                products = self.rag_manager.get_products_by_category(category, limit=10)
                
                if not products:
                    await query.edit_message_text(f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' —Ç–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                category_message = f"üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}**\n\n"
                category_message += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: **{len(products)}**\n\n"
                
                keyboard = []
                for i, product in enumerate(products, 1):
                    button_text = f"{i}. {product['name'][:40]}"
                    if len(product['name']) > 40:
                        button_text += "..."
                    
                    keyboard.append([InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"product_{product['id']}"
                    )])
                    
                    category_message += f"**{i}.** {product['name']}\n"
                    category_message += f"    –ë—Ä–µ–Ω–¥: {product.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                
                keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_new")])
                keyboard.append([InlineKeyboardButton("üìÇ –í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", callback_data="search_categories")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(category_message, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} viewed category: {category}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        
        elif callback_data.startswith("manufacturer_"):
            # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é
            manufacturer = callback_data[13:]  # –£–±–∏—Ä–∞–µ–º "manufacturer_" –∏–∑ –Ω–∞—á–∞–ª–∞
            
            if not self.rag_manager:
                await query.edit_message_text("‚ùå –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
                return
            
            try:
                products = self.rag_manager.search_products(manufacturer, top_k=10, device_manufacturer_filter=manufacturer)
                
                if not products:
                    await query.edit_message_text(f"‚ùå –¢–æ–≤–∞—Ä—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è '{manufacturer}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
                    return
                
                manufacturer_message = f"üè≠ **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {manufacturer}**\n\n"
                manufacturer_message += f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: **{len(products)}**\n\n"
                
                keyboard = []
                for i, product in enumerate(products, 1):
                    button_text = f"{i}. {product['name'][:40]}"
                    if len(product['name']) > 40:
                        button_text += "..."
                    
                    keyboard.append([InlineKeyboardButton(
                        text=button_text,
                        callback_data=f"product_{product['id']}"
                    )])
                    
                    manufacturer_message += f"**{i}.** {product['name']}\n"
                    manufacturer_message += f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
                    manufacturer_message += f"    –ë—Ä–µ–Ω–¥: {product.get('brand', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                
                keyboard.append([InlineKeyboardButton("üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="search_new")])
                keyboard.append([InlineKeyboardButton("üè≠ –í—Å–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏", callback_data="search_manufacturers")])
                
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(manufacturer_message, parse_mode='Markdown', reply_markup=reply_markup)
                logger.info(f"User {user.id} viewed manufacturer: {manufacturer}")
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—é.")
        
    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling"""
        logger.info("Starting Telegram bot polling...")
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        logger.info("Stopping Telegram bot...")
        await self.application.updater.stop()
        await self.application.stop()
        await self.application.shutdown()
