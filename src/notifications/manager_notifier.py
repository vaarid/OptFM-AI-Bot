"""
Manager notification system for OptFM AI Bot
"""
from typing import Dict, Any, List, Optional
import logging
from datetime import datetime
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

logger = logging.getLogger(__name__)

class ManagerNotifier:
    """–ö–ª–∞—Å—Å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤—ã—Ö –∑–∞—è–≤–∫–∞—Ö"""
    
    def __init__(self, config: Dict[str, Any]):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Args:
            config: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        self.config = config
        self.managers = config.get("managers", [])
        self.email_config = config.get("email", {})
        self.telegram_config = config.get("telegram", {})
        
        logger.info(f"Manager notifier initialized with {len(self.managers)} managers")
    
    def notify_new_request(self, request_data: Dict[str, Any], user_data: Dict[str, Any]) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ
        
        Args:
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = self._format_request_message(request_data, user_data)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            success = True
            
            # Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if self.email_config.get("enabled", False):
                email_success = self._send_email_notification(message, request_data)
                success = success and email_success
            
            # Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
            if self.telegram_config.get("enabled", False):
                telegram_success = self._send_telegram_notification(message, request_data)
                success = success and telegram_success
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if success:
                logger.info(f"Notification sent successfully for request {request_data.get('id')}")
            else:
                logger.warning(f"Failed to send notification for request {request_data.get('id')}")
            
            return success
            
        except Exception as e:
            logger.error(f"Error sending notification: {e}")
            return False
    
    def _format_request_message(self, request_data: Dict[str, Any], user_data: Dict[str, Any]) -> str:
        """
        –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ
        
        Args:
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            user_data: –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        """
        request_id = request_data.get("id", "N/A")
        title = request_data.get("title", "–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞")
        description = request_data.get("description", "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è")
        created_at = request_data.get("created_at", datetime.now())
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º created_at –∫–∞–∫ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ datetime
        if isinstance(created_at, str):
            try:
                created_at = datetime.fromisoformat(created_at.replace('Z', '+00:00'))
            except:
                created_at = datetime.now()
        elif not isinstance(created_at, datetime):
            created_at = datetime.now()
        
        name = user_data.get("name", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        phone = user_data.get("phone", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        email = user_data.get("email", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        telegram_id = user_data.get("telegram_id", "–ù–µ —É–∫–∞–∑–∞–Ω–æ")
        
        message = f"""
üö® **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê #{request_id}**

üìã **–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏:**
‚Ä¢ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}
‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {description}
‚Ä¢ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {created_at.strftime('%d.%m.%Y %H:%M')}

üë§ **–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞:**
‚Ä¢ –ò–º—è: {name}
‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}
‚Ä¢ Email: {email}
‚Ä¢ Telegram ID: {telegram_id}

üìû **–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
1. –°–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}
2. –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞
3. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
4. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ

‚è∞ **–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:** –ü–Ω-–ü—Ç 9:00-18:00
        """
        
        return message.strip()
    
    def _send_email_notification(self, message: str, request_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            smtp_server = self.email_config.get("smtp_server")
            smtp_port = self.email_config.get("smtp_port", 587)
            username = self.email_config.get("username")
            password = self.email_config.get("password")
            from_email = self.email_config.get("from_email")
            
            if not all([smtp_server, username, password, from_email]):
                logger.warning("Email configuration incomplete")
                return False
            
            # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            msg = MIMEMultipart()
            msg['From'] = from_email
            msg['Subject'] = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{request_data.get('id', 'N/A')} - OptFM Bot"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            msg.attach(MIMEText(message, 'plain', 'utf-8'))
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            with smtplib.SMTP(smtp_server, smtp_port) as server:
                server.starttls()
                server.login(username, password)
                
                for manager in self.managers:
                    manager_email = manager.get("email")
                    if manager_email:
                        msg['To'] = manager_email
                        server.send_message(msg)
                        logger.info(f"Email notification sent to {manager_email}")
            
            return True
            
        except Exception as e:
            logger.error(f"Error sending email notification: {e}")
            return False
    
    def _send_telegram_notification(self, message: str, request_data: Dict[str, Any]) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –±—É–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ
            request_data: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Telegram
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            logger.info(f"Telegram notification would be sent: {message[:100]}...")
            return True
            
        except Exception as e:
            logger.error(f"Error sending telegram notification: {e}")
            return False
    
    def get_managers_info(self) -> List[Dict[str, Any]]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞—Ö
        
        Returns:
            List[Dict[str, Any]]: –°–ø–∏—Å–æ–∫ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
        """
        return self.managers.copy()

class NotificationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    @staticmethod
    def get_default_config() -> Dict[str, Any]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        Returns:
            Dict[str, Any]: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        """
        return {
            "managers": [
                {
                    "name": "–ó–∞—Ä—É–±–∏–Ω–∞ –ê–Ω–Ω–∞",
                    "email": "anna@optfm.ru",
                    "phone": "+7 920 350-88-86",
                    "telegram_id": None
                },
                {
                    "name": "–ú–∞–ª—å—Ü–µ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä", 
                    "email": "alexander@optfm.ru",
                    "phone": "+7 920 352-07-79",
                    "telegram_id": None
                },
                {
                    "name": "–ö–æ—á–µ—Ç–∫–æ–≤–∞ –£–ª—å—è–Ω–∞",
                    "email": "ulyana@optfm.ru", 
                    "phone": "+7 930 357-13-10",
                    "telegram_id": None
                }
            ],
            "email": {
                "enabled": False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "username": "",
                "password": "",
                "from_email": "bot@optfm.ru"
            },
            "telegram": {
                "enabled": False,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–∫–ª—é—á–µ–Ω–æ
                "bot_token": "",
                "chat_ids": []
            }
        }
