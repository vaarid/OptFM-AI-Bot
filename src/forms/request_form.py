"""
Request form handling for OptFM AI Bot
"""
from typing import Dict, Any, Optional
from enum import Enum
import re
import logging

logger = logging.getLogger(__name__)

class FormState(Enum):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã –∑–∞—è–≤–∫–∏"""
    IDLE = "idle"
    ASKING_NAME = "asking_name"
    ASKING_PHONE = "asking_phone"
    ASKING_EMAIL = "asking_email"
    ASKING_DESCRIPTION = "asking_description"
    COMPLETED = "completed"

class RequestForm:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–æ—Ä–º–æ–π –∑–∞—è–≤–∫–∏"""
    
    def __init__(self):
        self.state = FormState.IDLE
        self.data = {
            "name": None,
            "phone": None,
            "email": None,
            "description": None,
            "original_question": None
        }
    
    def start_form(self, original_question: str = None) -> str:
        """
        –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        
        Args:
            original_question: –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.state = FormState.ASKING_NAME
        self.data["original_question"] = original_question
        
        return (
            "üìù –î–∞–≤–∞–π—Ç–µ –æ—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –¥–ª—è –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞!\n\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç? (–§–ò–û)"
        )
    
    def process_input(self, user_input: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_input: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        if self.state == FormState.IDLE:
            return {"message": "–§–æ—Ä–º–∞ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞", "completed": False}
        
        if self.state == FormState.ASKING_NAME:
            return self._process_name(user_input)
        elif self.state == FormState.ASKING_PHONE:
            return self._process_phone(user_input)
        elif self.state == FormState.ASKING_EMAIL:
            return self._process_email(user_input)
        elif self.state == FormState.ASKING_DESCRIPTION:
            return self._process_description(user_input)
        
        return {"message": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã", "completed": False}
    
    def _process_name(self, name: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
        name = name.strip()
        if len(name) < 2:
            return {
                "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)",
                "completed": False
            }
        
        self.data["name"] = name
        self.state = FormState.ASKING_PHONE
        
        return {
            "message": (
                f"–°–ø–∞—Å–∏–±–æ, {name}! üìû\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏:"
            ),
            "completed": False
        }
    
    def _process_phone(self, phone: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        phone = phone.strip()
        
        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        phone_clean = re.sub(r'[^\d+]', '', phone)
        if len(phone_clean) < 10:
            return {
                "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
                "completed": False
            }
        
        self.data["phone"] = phone
        self.state = FormState.ASKING_EMAIL
        
        return {
            "message": (
                "–û—Ç–ª–∏—á–Ω–æ! üìß\n\n"
                "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à email (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):"
            ),
            "completed": False
        }
    
    def _process_email(self, email: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ email"""
        email = email.strip().lower()
        
        if email.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', '–Ω–µ—Ç', '–Ω–µ –Ω—É–∂–Ω–æ', 'skip']:
            self.data["email"] = None
        else:
            # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è email
            email_pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
            if not re.match(email_pattern, email):
                return {
                    "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'",
                    "completed": False
                }
            self.data["email"] = email
        
        self.state = FormState.ASKING_DESCRIPTION
        
        return {
            "message": (
                "–•–æ—Ä–æ—à–æ! üìù\n\n"
                "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ:"
            ),
            "completed": False
        }
    
    def _process_description(self, description: str) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è"""
        description = description.strip()
        if len(description) < 10:
            return {
                "message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)",
                "completed": False
            }
        
        self.data["description"] = description
        self.state = FormState.COMPLETED
        
        return {
            "message": self._get_completion_message(),
            "completed": True,
            "data": self.data.copy()
        }
    
    def _get_completion_message(self) -> str:
        """–°–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ñ–æ—Ä–º—ã"""
        name = self.data["name"]
        phone = self.data["phone"]
        email = self.data.get("email", "–Ω–µ —É–∫–∞–∑–∞–Ω")
        
        return (
            f"‚úÖ –°–ø–∞—Å–∏–±–æ, {name}! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
            f"üìã **–î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:**\n"
            f"‚Ä¢ –ò–º—è: {name}\n"
            f"‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"‚Ä¢ Email: {email}\n"
            f"‚Ä¢ –í–æ–ø—Ä–æ—Å: {self.data['description']}\n\n"
            f"üìû –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É {phone}.\n\n"
            f"‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: –ü–Ω-–ü—Ç 9:00-18:00"
        )
    
    def cancel_form(self) -> str:
        """
        –û—Ç–º–µ–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
        
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        """
        self.state = FormState.IDLE
        self.data = {
            "name": None,
            "phone": None,
            "email": None,
            "description": None,
            "original_question": None
        }
        
        return "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å!"
    
    def get_current_state(self) -> FormState:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã"""
        return self.state
    
    def is_active(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º—ã"""
        return self.state != FormState.IDLE and self.state != FormState.COMPLETED

class RequestFormManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —Ñ–æ—Ä–º –∑–∞—è–≤–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    
    def __init__(self):
        self.forms: Dict[int, RequestForm] = {}
    
    def get_form(self, user_id: int) -> RequestForm:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            RequestForm: –§–æ—Ä–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id not in self.forms:
            self.forms[user_id] = RequestForm()
        
        return self.forms[user_id]
    
    def start_form(self, user_id: int, original_question: str = None) -> str:
        """
        –ù–∞—á–∞–ª–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            original_question: –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        form = self.get_form(user_id)
        return form.start_form(original_question)
    
    def process_input(self, user_id: int, user_input: str) -> Dict[str, Any]:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_input: –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            Dict[str, Any]: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏
        """
        form = self.get_form(user_id)
        return form.process_input(user_input)
    
    def cancel_form(self, user_id: int) -> str:
        """
        –û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            str: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ
        """
        form = self.get_form(user_id)
        return form.cancel_form()
    
    def is_user_filling_form(self, user_id: int) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω—è–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ñ–æ—Ä–º—É
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            bool: True –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É
        """
        form = self.get_form(user_id)
        return form.is_active()
    
    def clear_form(self, user_id: int):
        """
        –û—á–∏—Å—Ç–∫–∞ —Ñ–æ—Ä–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        if user_id in self.forms:
            del self.forms[user_id]
